===========================
How to Use 100-matrix_mul.py
============================

This module defines a function ``matrix_mul()`` that takes in two
2-d lists and returns the mathematical multiplication of both lists


::

   >>> matrix_mul = __import__('100-matrix_mul').matrix_mul
   >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
   [[7, 10], [15, 22]]

::

   >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
   [[13, 16]]

::

   >>> matrix_mul("not a list",[[1, 2]])
   Traceback (most recent call last):
   TypeError: m_a must be a list

::

   >>> matrix_mul([[1, 2]], "not a list")
   Traceback (most recent call last):
   TypeError: m_b must be a list

::   

   >>> matrix_mul(["not a list"],[[1, 2]])
   Traceback (most recent call last):
   TypeError: m_a must be a list of lists

::

   >>> matrix_mul([[1, 2]], ["not a list"])
   Traceback (most recent call last):
   TypeError: m_b must be a list of lists

::

   >>> matrix_mul([], [])
   Traceback (most recent call last):
   ValueError: m_a can't be empty

   >>> matrix_mul([[1, 2]], [])
   Traceback (most recent call last):
   ValueError: m_b can't be empty

::

   >>> matrix_mul([['a', 2], [3, 4]], [[1, 2], [3, 4]])
   Traceback (most recent call last):
   TypeError: m_a should contain only integers or floats

::

   >>> matrix_mul([[1, 2], [3, 4]], [['b', 2], [3, 4]])
   Traceback (most recent call last):
   TypeError: m_b should contain only integers or floats

::

   >>> matrix_mul([[1, 2, 3], [3, 4]], [[1, 2], [3, 4]])
   Traceback (most recent call last):
   TypeError: each row of m_a must be of the same size

::

   >>> matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [3, 4]])
   Traceback (most recent call last):
   TypeError: each row of m_b must be of the same size

::

   >>> matrix_mul([[3,4], [5,6]], [[1, 2]])
   Traceback (most recent call last):
   ValueError: m_a and m_b can't be multiplied