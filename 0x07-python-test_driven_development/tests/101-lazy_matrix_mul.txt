===========================
How to Use 100-lazy_matrix_mul.py
============================

This module defines a function ``lazy_matrix_mul()`` that takes in two
2-d lists and returns the mathematical multiplication of both lists


::

   >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
   >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
   array([[ 7, 10],
          [15, 22]])

::

   >>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
   array([[13, 16]])

::

   >>> lazy_matrix_mul("not a list",[[1, 2]])
   Traceback (most recent call last):
   numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U10'), dtype('int64')) -> None

::

   >>> lazy_matrix_mul([[1, 2]], "not a list")
   Traceback (most recent call last):
   numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U10')) -> None

::

   >>> lazy_matrix_mul(["not a list"],[[1, 2]])
   Traceback (most recent call last):
   ValueError: Scalar operands are not allowed, use '*' instead

::

   >>> lazy_matrix_mul([[1, 2]], ["not a list"])
   Traceback (most recent call last):
   numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U10')) -> None

::

   >>> lazy_matrix_mul([], [])
   0.0


   >>> lazy_matrix_mul([[1, 2]], [])
   Traceback (most recent call last):
   ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 0 is different from 2)

::

   >>> lazy_matrix_mul([['a', 2], [3, 4]], [[1, 2], [3, 4]])
   Traceback (most recent call last):
   numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U21'), dtype('int64')) -> None

::

   >>> lazy_matrix_mul([[1, 2], [3, 4]], [['b', 2], [3, 4]])
   Traceback (most recent call last):
   numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U21')) -> None

::

   >>> lazy_matrix_mul([[1, 2, 3], [3, 4]], [[1, 2], [3, 4]])
   array([list([1, 2, 3, 3, 4, 3, 4, 3, 4]),
          list([1, 2, 3, 1, 2, 3, 3, 4, 3, 4, 3, 4, 3, 4])], dtype=object)

::

   >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [3, 4]]) #doctest: +NORMALIZE_WHITESPACE
   array([list([1, 2, 3, 3, 4, 3, 4]),
          list([1, 2, 3, 1, 2, 3, 1, 2, 3, 3, 4, 3, 4, 3, 4, 3, 4])],
          dtype=object)

::

   >>> lazy_matrix_mul([[3,4], [5,6]], [[1, 2]])
   Traceback (most recent call last):
   ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 2)